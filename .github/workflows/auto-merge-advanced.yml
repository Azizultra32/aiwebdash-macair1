name: Advanced Auto Merge Pull Requests

# This workflow automatically merges pull requests that meet specific criteria:
# - Pass all required status checks (tests, linting, etc.)
# - Have required number of approvals (configurable)
# - Are not labeled with "do-not-merge" or similar labels
# - Are not in draft mode

on:
  # Trigger on various PR events
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review, labeled, unlabeled]
  pull_request_review:
    types: [submitted, dismissed]
  pull_request_review_comment:
    types: [created]
  check_suite:
    types: [completed]
  status: {}

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    
    # Allow configuration through environment variables
    env:
      MIN_APPROVALS: 0             # Minimum number of approvals required (0 = no approval needed)
      BLOCK_LABELS: "do-not-merge,wip,hold"  # Comma-separated list of labels that block merging
      REQUIRED_LABELS: ""          # Comma-separated list of labels required for merging (empty = no labels required)
      MERGE_METHOD: "squash"       # Merge method: merge, squash, or rebase
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Get PR information
        id: pr-info
        run: |
          # Extract basic PR information
          PR_NUMBER=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH" || echo "null")
          if [[ "$PR_NUMBER" == "null" ]]; then
            # For status events, extract PR number differently
            PR_URL=$(jq --raw-output .repository.pulls_url "$GITHUB_EVENT_PATH" | sed -e 's/{\/number}//')
            PR_NUMBER=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$PR_URL" | jq '.[] | select(.head.sha == "'$(jq --raw-output .sha "$GITHUB_EVENT_PATH")'") | .number' || echo "null")
          fi
          
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          
          if [[ "$PR_NUMBER" == "null" ]]; then
            echo "No PR found in event payload"
            exit 0
          fi
          
          # Get detailed PR info
          PR_INFO=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                   "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER")
          
          PR_STATE=$(echo "$PR_INFO" | jq --raw-output '.state')
          PR_DRAFT=$(echo "$PR_INFO" | jq --raw-output '.draft')
          PR_MERGEABLE=$(echo "$PR_INFO" | jq --raw-output '.mergeable')
          PR_MERGEABLE_STATE=$(echo "$PR_INFO" | jq --raw-output '.mergeable_state')
          HEAD_SHA=$(echo "$PR_INFO" | jq --raw-output '.head.sha')
          
          echo "pr_state=$PR_STATE" >> $GITHUB_OUTPUT
          echo "pr_draft=$PR_DRAFT" >> $GITHUB_OUTPUT
          echo "pr_mergeable=$PR_MERGEABLE" >> $GITHUB_OUTPUT
          echo "pr_mergeable_state=$PR_MERGEABLE_STATE" >> $GITHUB_OUTPUT
          echo "head_sha=$HEAD_SHA" >> $GITHUB_OUTPUT
          
          # Check if PR is a candidate for auto-merge
          if [[ "$PR_STATE" != "open" ]]; then
            echo "PR is not open, skipping"
            echo "eligible=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          if [[ "$PR_DRAFT" == "true" ]]; then
            echo "PR is in draft mode, skipping"
            echo "eligible=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "PR #$PR_NUMBER is being evaluated for auto-merge"
          echo "eligible=true" >> $GITHUB_OUTPUT
      
      - name: Check labels
        id: check-labels
        if: steps.pr-info.outputs.eligible == 'true'
        run: |
          PR_NUMBER=${{ steps.pr-info.outputs.pr_number }}
          
          # Get PR labels
          PR_LABELS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                     "https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/labels" | jq -r '.[].name')
          
          # Check for blocking labels
          IFS=',' read -ra BLOCK_ARRAY <<< "$BLOCK_LABELS"
          for label in "${BLOCK_ARRAY[@]}"; do
            if echo "$PR_LABELS" | grep -q "$label"; then
              echo "PR has blocking label: $label"
              echo "labels_ok=false" >> $GITHUB_OUTPUT
              exit 0
            fi
          done
          
          # Check for required labels
          if [[ -n "$REQUIRED_LABELS" ]]; then
            IFS=',' read -ra REQUIRED_ARRAY <<< "$REQUIRED_LABELS"
            for label in "${REQUIRED_ARRAY[@]}"; do
              if ! echo "$PR_LABELS" | grep -q "$label"; then
                echo "PR is missing required label: $label"
                echo "labels_ok=false" >> $GITHUB_OUTPUT
                exit 0
              fi
            done
          fi
          
          echo "PR labels check passed"
          echo "labels_ok=true" >> $GITHUB_OUTPUT
      
      - name: Check approvals
        id: check-approvals
        if: steps.pr-info.outputs.eligible == 'true' && steps.check-labels.outputs.labels_ok == 'true'
        run: |
          PR_NUMBER=${{ steps.pr-info.outputs.pr_number }}
          
          # Skip approval check if MIN_APPROVALS is 0
          if [[ "$MIN_APPROVALS" -eq 0 ]]; then
            echo "No approvals required by configuration"
            echo "approvals_ok=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Get PR reviews
          PR_REVIEWS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                      "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/reviews")
          
          # Count approvals (only the latest review per user counts)
          LATEST_APPROVALS=$(echo "$PR_REVIEWS" | jq -r 'group_by(.user.id) | map(sort_by(.submitted_at) | last) | map(select(.state == "APPROVED")) | length')
          
          echo "PR has $LATEST_APPROVALS approvals, $MIN_APPROVALS required"
          
          if [[ "$LATEST_APPROVALS" -ge "$MIN_APPROVALS" ]]; then
            echo "PR has sufficient approvals"
            echo "approvals_ok=true" >> $GITHUB_OUTPUT
          else
            echo "PR does not have enough approvals"
            echo "approvals_ok=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Check status checks
        id: check-status
        if: steps.pr-info.outputs.eligible == 'true' && steps.check-labels.outputs.labels_ok == 'true' && steps.check-approvals.outputs.approvals_ok == 'true'
        run: |
          HEAD_SHA=${{ steps.pr-info.outputs.head_sha }}
          
          # Get combined status checks
          CHECKS_STATUS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                        "https://api.github.com/repos/${{ github.repository }}/commits/$HEAD_SHA/status")
          
          STATUS_STATE=$(echo "$CHECKS_STATUS" | jq -r '.state')
          
          echo "PR status checks state: $STATUS_STATE"
          
          if [[ "$STATUS_STATE" == "success" ]]; then
            echo "All status checks passed"
            echo "status_ok=true" >> $GITHUB_OUTPUT
          else
            echo "Not all status checks have passed"
            echo "status_ok=false" >> $GITHUB_OUTPUT
          fi
          
          # Also check GitHub Check Runs (different from statuses)
          CHECK_RUNS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/vnd.github.v3+json" \
                     "https://api.github.com/repos/${{ github.repository }}/commits/$HEAD_SHA/check-runs")
          
          TOTAL_RUNS=$(echo "$CHECK_RUNS" | jq -r '.total_count')
          FAILED_RUNS=$(echo "$CHECK_RUNS" | jq -r '.check_runs[] | select(.conclusion != "success" and .conclusion != "skipped" and .conclusion != null) | .name')
          
          if [[ -n "$FAILED_RUNS" ]]; then
            echo "Some check runs failed or are pending:"
            echo "$FAILED_RUNS"
            echo "check_runs_ok=false" >> $GITHUB_OUTPUT
          else
            echo "All check runs passed or were skipped"
            echo "check_runs_ok=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Enable auto-merge
        if: >
          steps.pr-info.outputs.eligible == 'true' && 
          steps.check-labels.outputs.labels_ok == 'true' && 
          steps.check-approvals.outputs.approvals_ok == 'true' && 
          steps.check-status.outputs.status_ok == 'true' && 
          steps.check-status.outputs.check_runs_ok == 'true'
        uses: peter-evans/enable-pull-request-automerge@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pull-request-number: ${{ steps.pr-info.outputs.pr_number }}
          merge-method: ${{ env.MERGE_METHOD }}
      
      - name: Report auto-merge status
        if: always() && steps.pr-info.outputs.pr_number != 'null'
        run: |
          PR_NUMBER=${{ steps.pr-info.outputs.pr_number }}
          
          if [[ "${{ steps.pr-info.outputs.eligible }}" != "true" ]]; then
            echo "PR #$PR_NUMBER is not eligible for auto-merge (not open or in draft mode)"
            exit 0
          fi
          
          if [[ "${{ steps.check-labels.outputs.labels_ok }}" != "true" ]]; then
            echo "PR #$PR_NUMBER has blocking labels or is missing required labels"
            exit 0
          fi
          
          if [[ "${{ steps.check-approvals.outputs.approvals_ok }}" != "true" ]]; then
            echo "PR #$PR_NUMBER does not have enough approvals"
            exit 0
          fi
          
          if [[ "${{ steps.check-status.outputs.status_ok }}" != "true" ]]; then
            echo "PR #$PR_NUMBER has failed status checks"
            exit 0
          fi
          
          if [[ "${{ steps.check-status.outputs.check_runs_ok }}" != "true" ]]; then
            echo "PR #$PR_NUMBER has failed check runs"
            exit 0
          fi
          
          echo "Auto-merge enabled for PR #$PR_NUMBER with method: $MERGE_METHOD"
