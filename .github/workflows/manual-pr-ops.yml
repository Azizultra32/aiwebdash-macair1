name: Manual PR Operations

on:
  workflow_dispatch:
    inputs:
      operation:
        description: 'Operation to perform'
        required: true
        type: choice
        options:
          - 'check-specific-pr'
          - 'merge-specific-pr'
          - 'rebase-specific-pr'
          - 'rebase-all-prs'
          - 'generate-report'
          - 'cleanup-merged-branches'
      pr_number:
        description: 'PR number (for specific operations)'
        required: false
        type: string
      force_merge:
        description: 'Force merge (bypass some checks)'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  issues: write
  pull-requests: write
  workflows: read

jobs:
  check-specific-pr:
    if: github.event.inputs.operation == 'check-specific-pr'
    runs-on: ubuntu-latest
    name: Check Specific PR
    
    steps:
    - name: Validate PR number
      run: |
        if [ -z "${{ github.event.inputs.pr_number }}" ]; then
          echo "❌ PR number is required for this operation"
          exit 1
        fi
        
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Fetch PR
      run: |
        git fetch origin pull/${{ github.event.inputs.pr_number }}/head:pr-${{ github.event.inputs.pr_number }}
        git checkout pr-${{ github.event.inputs.pr_number }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run prepare-pr script
      run: |
        chmod +x ./prepare-pr.sh
        ./prepare-pr.sh main
        
    - name: Report results
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = '${{ github.event.inputs.pr_number }}';
          
          await github.rest.issues.createComment({
            issue_number: parseInt(prNumber),
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `🤖 **Manual PR Check Complete**\n\nPR #${prNumber} has been checked via workflow dispatch.\n\n✅ Rebase successful\n✅ Tests passed\n✅ Linting passed\n\nThis PR is ready for manual review and merge.`
          });

  merge-specific-pr:
    if: github.event.inputs.operation == 'merge-specific-pr'
    runs-on: ubuntu-latest
    name: Merge Specific PR
    
    steps:
    - name: Validate inputs
      run: |
        if [ -z "${{ github.event.inputs.pr_number }}" ]; then
          echo "❌ PR number is required for merge operation"
          exit 1
        fi
        
    - name: Merge PR
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = parseInt('${{ github.event.inputs.pr_number }}');
          const forceMerge = '${{ github.event.inputs.force_merge }}' === 'true';
          
          try {
            // Get PR details
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            
            // Check if PR is mergeable (unless force merge)
            if (!forceMerge && pr.mergeable === false) {
              throw new Error('PR has merge conflicts. Use force_merge=true to override.');
            }
            
            if (!forceMerge && pr.mergeable === null) {
              throw new Error('PR mergeability is unknown. GitHub is still checking.');
            }
            
            // Merge the PR
            const { data: merge } = await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              merge_method: 'squash',
              commit_title: `${pr.title} (#${prNumber})`,
              commit_message: `Merged via manual workflow dispatch\n\nOriginal PR: #${prNumber}\nAuthor: @${pr.user.login}`
            });
            
            console.log(`✅ Successfully merged PR #${prNumber}`);
            console.log(`Merge SHA: ${merge.sha}`);
            
            // Delete the branch if it's from the same repo
            if (pr.head.repo.full_name === pr.base.repo.full_name) {
              try {
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `heads/${pr.head.ref}`
                });
                console.log(`✅ Deleted branch: ${pr.head.ref}`);
              } catch (error) {
                console.log(`⚠️ Could not delete branch: ${error.message}`);
              }
            }
            
          } catch (error) {
            console.error(`❌ Failed to merge PR #${prNumber}: ${error.message}`);
            throw error;
          }

  rebase-specific-pr:
    if: github.event.inputs.operation == 'rebase-specific-pr'
    runs-on: ubuntu-latest
    name: Rebase Specific PR

    steps:
    - name: Validate PR number
      run: |
        if [ -z "${{ github.event.inputs.pr_number }}" ]; then
          echo "❌ PR number is required for rebase operation"
          exit 1
        fi

    - name: Rebase PR
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = parseInt('${{ github.event.inputs.pr_number }}');

          try {
            // Get PR details
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            // Check if PR is from a fork
            if (pr.head.repo.full_name !== pr.base.repo.full_name) {
              throw new Error('Cannot rebase PRs from forks automatically. Please ask contributor to rebase manually.');
            }

            // Check if PR is behind
            const { data: comparison } = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: pr.base.sha,
              head: pr.head.sha
            });

            if (comparison.behind_by === 0) {
              console.log(`✅ PR #${prNumber} is already up to date`);

              await github.rest.issues.createComment({
                issue_number: prNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `🤖 **Rebase Check Complete**\n\n✅ This PR is already up to date with \`main\`.\n\nNo rebase needed!`
              });

              return;
            }

            console.log(`🔄 PR #${prNumber} is ${comparison.behind_by} commits behind, rebasing...`);

            // Attempt to rebase
            await github.rest.pulls.updateBranch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              expected_head_sha: pr.head.sha
            });

            console.log(`✅ Successfully rebased PR #${prNumber}`);

            // Add success comment
            await github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🤖 **Auto-Rebase Complete**\n\n✅ This PR has been successfully rebased onto the latest \`main\` branch.\n\n**Changes:**\n- Rebased ${comparison.behind_by} commits from main\n- Branch is now up to date\n- Quality gates will run automatically\n\nReady for review!`
            });

          } catch (error) {
            console.error(`❌ Failed to rebase PR #${prNumber}: ${error.message}`);

            // Add failure comment with manual instructions
            await github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🤖 **Auto-Rebase Failed**\n\n❌ Could not automatically rebase this PR: ${error.message}\n\n**Manual rebase required:**\n\`\`\`bash\ngit checkout ${pr.head.ref}\ngit fetch origin main\ngit rebase origin/main\n# Resolve any conflicts\ngit push --force-with-lease\n\`\`\`\n\n**Or use GitHub web interface:**\n1. Click "Update branch" button above\n2. Select "Update with rebase"\n3. Resolve conflicts if any appear`
            });

            throw error;
          }

  generate-report:
    if: github.event.inputs.operation == 'generate-report'
    runs-on: ubuntu-latest
    name: Generate PR Report
    
    steps:
    - name: Generate comprehensive report
      uses: actions/github-script@v7
      with:
        script: |
          const { data: prs } = await github.rest.pulls.list({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            per_page: 100
          });
          
          const now = new Date();
          let report = '# 📊 Comprehensive PR Report\n\n';
          report += `Generated: ${now.toISOString()}\n\n`;
          
          // Summary stats
          const stats = {
            total: prs.length,
            ready: 0,
            conflicts: 0,
            draft: 0,
            stale: 0,
            recent: 0
          };
          
          const staleThreshold = 14 * 24 * 60 * 60 * 1000; // 14 days
          const recentThreshold = 3 * 24 * 60 * 60 * 1000; // 3 days
          
          // Categorize PRs
          const categories = {
            ready: [],
            conflicts: [],
            stale: [],
            draft: [],
            recent: []
          };
          
          for (const pr of prs) {
            const updatedAt = new Date(pr.updated_at);
            const age = now - updatedAt;
            
            if (pr.draft) {
              stats.draft++;
              categories.draft.push(pr);
            } else if (age > staleThreshold) {
              stats.stale++;
              categories.stale.push(pr);
            } else if (age < recentThreshold) {
              stats.recent++;
              categories.recent.push(pr);
            } else if (pr.mergeable === false) {
              stats.conflicts++;
              categories.conflicts.push(pr);
            } else if (pr.mergeable === true) {
              stats.ready++;
              categories.ready.push(pr);
            }
          }
          
          // Build report
          report += `## 📈 Summary\n\n`;
          report += `| Category | Count |\n`;
          report += `|----------|-------|\n`;
          report += `| Total Open | ${stats.total} |\n`;
          report += `| Ready to Merge | ${stats.ready} |\n`;
          report += `| Has Conflicts | ${stats.conflicts} |\n`;
          report += `| Draft | ${stats.draft} |\n`;
          report += `| Stale (>14 days) | ${stats.stale} |\n`;
          report += `| Recent (<3 days) | ${stats.recent} |\n\n`;
          
          // Ready to merge
          if (categories.ready.length > 0) {
            report += `## ✅ Ready to Merge (${categories.ready.length})\n\n`;
            for (const pr of categories.ready) {
              report += `- **#${pr.number}** ${pr.title} by @${pr.user.login}\n`;
            }
            report += '\n';
          }
          
          // Conflicts
          if (categories.conflicts.length > 0) {
            report += `## ❌ Has Conflicts (${categories.conflicts.length})\n\n`;
            for (const pr of categories.conflicts) {
              report += `- **#${pr.number}** ${pr.title} by @${pr.user.login}\n`;
            }
            report += '\n';
          }
          
          // Stale PRs
          if (categories.stale.length > 0) {
            report += `## ⚠️ Stale PRs (${categories.stale.length})\n\n`;
            for (const pr of categories.stale) {
              const daysSinceUpdate = Math.floor((now - new Date(pr.updated_at)) / (24 * 60 * 60 * 1000));
              report += `- **#${pr.number}** ${pr.title} by @${pr.user.login} (${daysSinceUpdate} days)\n`;
            }
            report += '\n';
          }
          
          // Create or update report issue
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'pr-report',
            state: 'open'
          });
          
          if (issues.length > 0) {
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issues[0].number,
              title: `📊 PR Report - ${now.toISOString().split('T')[0]}`,
              body: report
            });
          } else {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `📊 PR Report - ${now.toISOString().split('T')[0]}`,
              body: report,
              labels: ['pr-report']
            });
          }

  cleanup-merged-branches:
    if: github.event.inputs.operation == 'cleanup-merged-branches'
    runs-on: ubuntu-latest
    name: Cleanup Merged Branches
    
    steps:
    - name: Cleanup merged branches
      uses: actions/github-script@v7
      with:
        script: |
          const { data: branches } = await github.rest.repos.listBranches({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          let deleted = 0;
          let skipped = 0;
          
          for (const branch of branches) {
            // Skip main/master and other protected branches
            if (['main', 'master', 'develop', 'staging'].includes(branch.name)) {
              continue;
            }
            
            try {
              // Check if branch is merged
              const { data: comparison } = await github.rest.repos.compareCommits({
                owner: context.repo.owner,
                repo: context.repo.repo,
                base: 'main',
                head: branch.name
              });
              
              if (comparison.status === 'identical' || comparison.behind_by === 0) {
                // Branch is merged, safe to delete
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `heads/${branch.name}`
                });
                
                console.log(`✅ Deleted merged branch: ${branch.name}`);
                deleted++;
              } else {
                console.log(`⏭️ Skipped unmerged branch: ${branch.name}`);
                skipped++;
              }
            } catch (error) {
              console.log(`❌ Error processing branch ${branch.name}: ${error.message}`);
              skipped++;
            }
          }
          
          console.log(`\n📊 Cleanup Summary:`);
          console.log(`- Deleted: ${deleted} branches`);
          console.log(`- Skipped: ${skipped} branches`);

  rebase-all-prs:
    if: github.event.inputs.operation == 'rebase-all-prs'
    runs-on: ubuntu-latest
    name: Rebase All PRs

    steps:
    - name: Rebase all open PRs
      uses: actions/github-script@v7
      with:
        script: |
          const { data: prs } = await github.rest.pulls.list({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            per_page: 100
          });

          console.log(`🔄 Found ${prs.length} open PRs to process`);

          let processed = 0;
          let succeeded = 0;
          let failed = 0;
          let skipped = 0;

          for (const pr of prs) {
            processed++;
            console.log(`\n📋 Processing PR #${pr.number}: ${pr.title}`);

            try {
              // Skip draft PRs
              if (pr.draft) {
                console.log(`⏭️ Skipping draft PR #${pr.number}`);
                skipped++;
                continue;
              }

              // Skip PRs from forks
              if (pr.head.repo.full_name !== pr.base.repo.full_name) {
                console.log(`⏭️ Skipping fork PR #${pr.number} (cannot auto-rebase)`);
                skipped++;

                await github.rest.issues.createComment({
                  issue_number: pr.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: `🤖 **Auto-Rebase Skipped**\n\n⏭️ This PR is from a fork and cannot be automatically rebased.\n\n**Manual rebase required:**\n\`\`\`bash\ngit checkout ${pr.head.ref}\ngit fetch upstream main\ngit rebase upstream/main\n# Resolve any conflicts\ngit push --force-with-lease\n\`\`\`\n\nPlease rebase your branch and push the changes.`
                });
                continue;
              }

              // Check if PR is behind
              const { data: comparison } = await github.rest.repos.compareCommits({
                owner: context.repo.owner,
                repo: context.repo.repo,
                base: pr.base.sha,
                head: pr.head.sha
              });

              if (comparison.behind_by === 0) {
                console.log(`✅ PR #${pr.number} is already up to date`);
                skipped++;
                continue;
              }

              console.log(`🔄 PR #${pr.number} is ${comparison.behind_by} commits behind, rebasing...`);

              // Attempt to rebase
              await github.rest.pulls.updateBranch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                expected_head_sha: pr.head.sha
              });

              console.log(`✅ Successfully rebased PR #${pr.number}`);
              succeeded++;

              // Add success comment
              await github.rest.issues.createComment({
                issue_number: pr.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `🤖 **Auto-Rebase Complete**\n\n✅ This PR has been successfully rebased onto the latest \`main\` branch.\n\n**Changes:**\n- Rebased ${comparison.behind_by} commits from main\n- Branch is now up to date\n- Quality gates will run automatically\n\nReady for review!`
              });

            } catch (error) {
              console.error(`❌ Failed to rebase PR #${pr.number}: ${error.message}`);
              failed++;

              // Add failure comment with manual instructions
              await github.rest.issues.createComment({
                issue_number: pr.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `🤖 **Auto-Rebase Failed**\n\n❌ Could not automatically rebase this PR: ${error.message}\n\n**Manual rebase required:**\n\`\`\`bash\ngit checkout ${pr.head.ref}\ngit fetch origin main\ngit rebase origin/main\n# Resolve any conflicts\ngit push --force-with-lease\n\`\`\`\n\n**Or use GitHub web interface:**\n1. Click "Update branch" button above\n2. Select "Update with rebase"\n3. Resolve conflicts if any appear`
              });
            }
          }

          console.log(`\n📊 Rebase Summary:`);
          console.log(`- Total PRs: ${processed}`);
          console.log(`- Successfully rebased: ${succeeded}`);
          console.log(`- Failed: ${failed}`);
          console.log(`- Skipped: ${skipped}`);
