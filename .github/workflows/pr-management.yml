name: PR Management & Quality Gates

on:
  pull_request:
    types: [opened, synchronize, reopened]
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours
  push:
    branches: [ main ]  # Auto-rebase when main is updated
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'check-all'
        type: choice
        options:
        - check-all
        - merge-ready
        - close-stale
        - rebase-all
        - rebase-behind

permissions:
  contents: write
  issues: write
  pull-requests: write
  workflows: read

jobs:
  pr-quality-check:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    name: PR Quality Gates
    permissions:
      contents: read
      pull-requests: write
      issues: write
      statuses: write
    
    steps:
    - name: Checkout PR
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Clean dependency cache
      run: |
        rm -rf node_modules package-lock.json

    - name: Install dependencies
      run: npm ci
      
    - name: Configure Git User
      run: |
        echo "üîß Configuring Git user for GitHub Actions..."
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

        echo "‚úÖ Git configuration set:"
        echo "  Global user.name: $(git config --global user.name)"
        echo "  Global user.email: $(git config --global user.email)"

        echo "üîç Environment check:"
        echo "  Runner: $(whoami)@$(hostname)"
        echo "  Working directory: $(pwd)"
        echo "  Git version: $(git --version)"

    - name: Check merge conflicts
      run: |
        git fetch origin main
        if ! git merge-tree $(git merge-base HEAD origin/main) HEAD origin/main | grep -q "<<<<<<< "; then
          echo "‚úÖ No merge conflicts detected"
          echo "CONFLICTS=false" >> $GITHUB_ENV
        else
          echo "‚ùå Merge conflicts detected"
          echo "CONFLICTS=true" >> $GITHUB_ENV
        fi

    - name: Run prepare-pr script
      run: |
        echo "üöÄ Starting prepare-pr script execution..."
        echo "üìã Pre-execution environment check:"
        echo "  Git user.name: $(git config --global user.name 2>/dev/null || echo 'NOT SET')"
        echo "  Git user.email: $(git config --global user.email 2>/dev/null || echo 'NOT SET')"
        echo "  Working tree status: $(git status --porcelain | wc -l) files changed"
        echo "  Current branch: $(git branch --show-current)"
        echo "  Node modules exists: $([ -d node_modules ] && echo 'YES' || echo 'NO')"
        echo "  Package-lock exists: $([ -f package-lock.json ] && echo 'YES' || echo 'NO')"

        chmod +x ./prepare-pr.sh
        echo "üîß Script permissions set, executing with debug mode..."

        if set -x && ./prepare-pr.sh main; then
          echo "‚úÖ Prepare-PR passed"
          echo "PREPARE_STATUS=success" >> $GITHUB_ENV
        else
          echo "‚ùå Prepare-PR failed with exit code $?"
          echo "üîç Post-failure environment check:"
          echo "  Git user.name: $(git config --global user.name 2>/dev/null || echo 'NOT SET')"
          echo "  Git user.email: $(git config --global user.email 2>/dev/null || echo 'NOT SET')"
          echo "  Working tree status: $(git status --porcelain | wc -l) files changed"
          echo "  Node modules exists: $([ -d node_modules ] && echo 'YES' || echo 'NO')"
          echo "  Package-lock exists: $([ -f package-lock.json ] && echo 'YES' || echo 'NO')"
          echo "PREPARE_STATUS=failed" >> $GITHUB_ENV
        fi
        
    - name: Update PR status
      uses: actions/github-script@v7
      with:
        script: |
          const conflicts = process.env.CONFLICTS === 'true';
          const prepareStatus = process.env.PREPARE_STATUS;
          
          let status = 'üîç **PR Status Check**\n\n';
          status += `- **Merge Conflicts:** ${conflicts ? '‚ùå Found' : '‚úÖ None'}\n`;
          status += `- **Prepare Script:** ${prepareStatus === 'success' ? '‚úÖ Passed' : '‚ùå Failed'}\n`;
          status += `- **Ready to Merge:** ${!conflicts && prepareStatus === 'success' ? '‚úÖ Yes' : '‚ùå No'}\n\n`;
          
          if (conflicts) {
            status += '**Action Required:** Please rebase your branch onto main to resolve conflicts.\n';
            status += '```bash\ngit fetch origin main\ngit rebase origin/main\n```\n';
          }
          
          if (prepareStatus === 'failed') {
            status += '**Action Required:** Please fix linting/test failures and push updates.\n';
          }
          
          if (!conflicts && prepareStatus === 'success') {
            status += '**‚ú® This PR is ready for review and merge!**\n';
          }
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: status
          });

  pr-dashboard-update:
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    name: Update PR Dashboard
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Update PR tracking
      uses: actions/github-script@v7
      with:
        script: |
          const { data: prs } = await github.rest.pulls.list({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            per_page: 100
          });
          
          let dashboard = '# üìã PR Dashboard\n\n';
          dashboard += `Updated: ${new Date().toISOString()}\n\n`;
          dashboard += `## Open PRs (${prs.length})\n\n`;
          
          const now = new Date();
          const staleThreshold = 14 * 24 * 60 * 60 * 1000; // 14 days
          
          let readyCount = 0;
          let conflictCount = 0;
          let staleCount = 0;
          
          for (const pr of prs) {
            const updatedAt = new Date(pr.updated_at);
            const isStale = (now - updatedAt) > staleThreshold;
            const daysSinceUpdate = Math.floor((now - updatedAt) / (24 * 60 * 60 * 1000));
            
            if (isStale) staleCount++;
            
            dashboard += `### PR #${pr.number} - ${pr.title}\n`;
            dashboard += `- **Branch:** \`${pr.head.ref}\`\n`;
            dashboard += `- **Author:** @${pr.user.login}\n`;
            dashboard += `- **Updated:** ${daysSinceUpdate} days ago\n`;
            dashboard += `- **Mergeable:** ${pr.mergeable ?? 'Unknown'}\n`;
            
            if (isStale) {
              dashboard += `- **Status:** ‚ö†Ô∏è STALE (${daysSinceUpdate} days)\n`;
            } else if (pr.mergeable === false) {
              dashboard += `- **Status:** ‚ùå CONFLICTS\n`;
              conflictCount++;
            } else if (pr.mergeable === true) {
              dashboard += `- **Status:** ‚úÖ READY\n`;
              readyCount++;
            } else {
              dashboard += `- **Status:** üîç CHECKING\n`;
            }
            
            dashboard += `- **Checkout:** \`git checkout -b pr-${pr.number} refs/pull/${pr.number}/head\`\n\n`;
          }
          
          dashboard += `## Summary\n\n`;
          dashboard += `- **Total PRs:** ${prs.length}\n`;
          dashboard += `- **Ready to Merge:** ${readyCount}\n`;
          dashboard += `- **Need Conflict Resolution:** ${conflictCount}\n`;
          dashboard += `- **Stale (>14 days):** ${staleCount}\n`;
          
          // Update or create dashboard issue
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'pr-dashboard',
            state: 'open'
          });
          
          if (issues.length > 0) {
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issues[0].number,
              body: dashboard
            });
          } else {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üìã PR Management Dashboard',
              body: dashboard,
              labels: ['pr-dashboard']
            });
          }

  auto-merge-ready:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'merge-ready'
    runs-on: ubuntu-latest
    name: Auto-merge Ready PRs
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Auto-merge ready PRs
      uses: actions/github-script@v7
      with:
        script: |
          const { data: prs } = await github.rest.pulls.list({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open'
          });
          
          for (const pr of prs) {
            if (pr.mergeable === true && pr.draft === false) {
              try {
                await github.rest.pulls.merge({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr.number,
                  merge_method: 'squash',
                  commit_title: `${pr.title} (#${pr.number})`,
                  commit_message: `Merged via automated workflow\n\nCo-authored-by: ${pr.user.login} <${pr.user.login}@users.noreply.github.com>`
                });
                
                console.log(`‚úÖ Merged PR #${pr.number}: ${pr.title}`);
              } catch (error) {
                console.log(`‚ùå Failed to merge PR #${pr.number}: ${error.message}`);
              }
            }
          }

  close-stale-prs:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'close-stale'
    runs-on: ubuntu-latest
    name: Close Stale PRs
    
    steps:
    - name: Close stale PRs
      uses: actions/github-script@v7
      with:
        script: |
          const { data: prs } = await github.rest.pulls.list({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open'
          });
          
          const now = new Date();
          const staleThreshold = 30 * 24 * 60 * 60 * 1000; // 30 days
          
          for (const pr of prs) {
            const updatedAt = new Date(pr.updated_at);
            const isStale = (now - updatedAt) > staleThreshold;
            
            if (isStale) {
              const daysSinceUpdate = Math.floor((now - updatedAt) / (24 * 60 * 60 * 1000));
              
              await github.rest.issues.createComment({
                issue_number: pr.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `This PR has been automatically closed due to inactivity (${daysSinceUpdate} days since last update). Per repository policy, PRs are closed after 30 days of inactivity. If you'd like to continue this work, please reopen and rebase onto the latest main branch.`
              });
              
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                state: 'closed'
              });
              
              console.log(`Closed stale PR #${pr.number}: ${pr.title} (${daysSinceUpdate} days old)`);
            }
          }

  auto-rebase-all:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'rebase-all'
    runs-on: ubuntu-latest
    name: Rebase All PRs

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Rebase all open PRs
      uses: actions/github-script@v7
      with:
        script: |
          const { data: prs } = await github.rest.pulls.list({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            per_page: 100
          });

          let rebased = 0;
          let failed = 0;
          let skipped = 0;

          for (const pr of prs) {
            try {
              // Skip draft PRs and PRs from forks
              if (pr.draft || pr.head.repo.full_name !== pr.base.repo.full_name) {
                console.log(`‚è≠Ô∏è Skipped PR #${pr.number}: ${pr.draft ? 'Draft' : 'Fork'}`);
                skipped++;
                continue;
              }

              // Check if PR is behind
              const { data: comparison } = await github.rest.repos.compareCommits({
                owner: context.repo.owner,
                repo: context.repo.repo,
                base: pr.base.sha,
                head: pr.head.sha
              });

              if (comparison.behind_by === 0) {
                console.log(`‚úÖ PR #${pr.number} is already up to date`);
                skipped++;
                continue;
              }

              // Attempt to rebase
              await github.rest.pulls.updateBranch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                expected_head_sha: pr.head.sha
              });

              console.log(`‚úÖ Rebased PR #${pr.number}: ${pr.title}`);
              rebased++;

              // Add comment to PR
              await github.rest.issues.createComment({
                issue_number: pr.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `ü§ñ **Auto-Rebase Complete**\n\nThis PR has been automatically rebased onto the latest \`main\` branch.\n\n‚úÖ Rebase successful\n‚è≥ Quality gates will run automatically`
              });

            } catch (error) {
              console.log(`‚ùå Failed to rebase PR #${pr.number}: ${error.message}`);
              failed++;

              // Add comment about failure
              await github.rest.issues.createComment({
                issue_number: pr.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `ü§ñ **Auto-Rebase Failed**\n\n‚ùå Could not automatically rebase this PR: ${error.message}\n\n**Manual action required:**\n\`\`\`bash\ngit checkout ${pr.head.ref}\ngit fetch origin main\ngit rebase origin/main\ngit push --force-with-lease\n\`\`\``
              });
            }
          }

          console.log(`\nüìä Rebase Summary:`);
          console.log(`- Successfully rebased: ${rebased}`);
          console.log(`- Failed: ${failed}`);
          console.log(`- Skipped: ${skipped}`);

  auto-rebase-behind:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'rebase-behind'
    runs-on: ubuntu-latest
    name: Rebase Behind PRs Only

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Rebase PRs that are behind main
      uses: actions/github-script@v7
      with:
        script: |
          const { data: prs } = await github.rest.pulls.list({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            per_page: 100
          });

          let rebased = 0;
          let failed = 0;
          let upToDate = 0;

          for (const pr of prs) {
            try {
              // Skip draft PRs and PRs from forks
              if (pr.draft || pr.head.repo.full_name !== pr.base.repo.full_name) {
                continue;
              }

              // Check if PR is behind main
              const { data: comparison } = await github.rest.repos.compareCommits({
                owner: context.repo.owner,
                repo: context.repo.repo,
                base: pr.base.sha,
                head: pr.head.sha
              });

              if (comparison.behind_by === 0) {
                console.log(`‚úÖ PR #${pr.number} is up to date`);
                upToDate++;
                continue;
              }

              console.log(`üîÑ PR #${pr.number} is ${comparison.behind_by} commits behind, rebasing...`);

              // Attempt to rebase
              await github.rest.pulls.updateBranch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                expected_head_sha: pr.head.sha
              });

              console.log(`‚úÖ Rebased PR #${pr.number}: ${pr.title}`);
              rebased++;

            } catch (error) {
              console.log(`‚ùå Failed to rebase PR #${pr.number}: ${error.message}`);
              failed++;
            }
          }

          console.log(`\nüìä Behind-PRs Rebase Summary:`);
          console.log(`- Successfully rebased: ${rebased}`);
          console.log(`- Failed: ${failed}`);
          console.log(`- Already up to date: ${upToDate}`);
